<section>
  <div class="container">
    <div>
      <h1>Date Helper</h1>
      <p>The DateHelper module is used primarily to create HTML select tags for different
        kinds of calendar data. It also features one of the longest-named helper
        methods, a beast peculiar to Rails, called <em><code>distance_of_time_in_words_to_now</code></em>.</p>
    </div>

    <div class="subsection">
      <h3 class="text-uppercase">1. The Date and Time Selection Helpers</h3>

      <!----------------------------------------------------------------------------------------------------------->
      <!----------------------------------------------- date_select ----------------------------------------------->
      <!----------------------------------------------------------------------------------------------------------->
      <h4><code><strong>date_select(object_name, method, options = {}, html_options = {})</strong></code></h4>
      <div>
        <p>
          Returns a matched set of three select tags (one each for <strong>year</strong>, <strong>month</strong>, and
          <strong>day</strong>) preselected for accessing a specified date-based attribute (identified by
          the method parameter) on an object assigned to the template (identified by object_name).
        </p>
        <p>
          It’s possible to tailor the selects through the options hash, which accepts all
          the keys that each of the individual select builders do (such as <code>:use_month_numbers</code>
          for select_month).
        </p>
        <p>
          The <code>date_select</code> method also takes <code>:discard_year</code>, <code>:discard_month</code>, and <code>:discard_
          day</code> options, which drop the corresponding select tag from the set of
          three. Common sense dictates that discarding the month select will also
          automatically discard the day select. If the day is omitted, but not the month,
          Rails will assume that the day should be the first of the month.
        </p>
        <p>
          It’s also possible to explicitly set the order of the tags using the <code>:order</code> option
          with an array of symbols <code>:year</code>, <code>:month</code>, and <code>:day</code> in the desired order. Symbols
          may be omitted, and the respective select tag is not included.
        </p>
        <p>
          Passing <code>disabled: true</code> as part of the options will make elements inaccessible
          for change.
        </p>
      </div>
      <%= render 'shared/example_card', examples: [
          "date_select(:user, 'birthday')",
          "date_select(:post, 'write_on', start_year: 1995,
              use_month_numbers: true,
              discard_day: true,
              include_blank: true)",
          "date_select(:post, 'written_on', order: [:day, :month, :year])",
          "date_select(:user, 'birthday', order: [:month, :day])"
      ] %>

      <!----------------------------------------------------------------------------------------------------------->
      <!--------------------------------------------- datetime_select --------------------------------------------->
      <!----------------------------------------------------------------------------------------------------------->
      <br>
      <h4><code><strong>datetime_select(object_name, method, options = {}, html_options = {})</strong></code></h4>
      <div>
        <p>
          Works exactly like <code>date_select</code>, except for the addition of hour and minute
          select tags. Seconds may be added with the option <code>:include_seconds</code>. Along
          with the addition of time information come additional discarding options:
          <code>:discard_hour</code>, <code>:discard_minute</code>, and <code>:discard_seconds</code>.
        </p>
        <p>
          Setting the ampm option to true return hours in the AM/PM format.
        </p>
      </div>
      <%= render 'shared/example_card', examples: [
          "datetime_select('post', 'written_on')",
          "datetime_select('post', 'written_on', ampm: true)",
          "time_select('game', 'written_on', ampm: true)"
      ] %>

      <!----------------------------------------------------------------------------------------------------------->
      <!----------------------------------------------- time_select ----------------------------------------------->
      <!----------------------------------------------------------------------------------------------------------->
      <br>
      <h4><code><strong>time_select(object_name, method, options = {}, html_options = {})</strong></code></h4>
      <div>
        <p>
          Returns a set of select tags (one for hour, minute, and optionally second) preselected
          for accessing a specified time-based attribute (identified by method) on
          an object assigned to the template (identified by object_name). You can include
          the seconds by setting the <code>:include_seconds</code> option to true.
        </p>
        <p>
          As with <code>datetime_select</code>, setting <code>ampm: true</code> will result in hours displayed in the
          AM/PM format.
        </p>
      </div>
      <%= render 'shared/example_card', examples: [
          "time_select('post', 'sunrise')",
          "time_select('post', 'written_on', include_seconds: true)",
          "time_select('game', 'written_on', ampm: true)"
      ] %>
    </div>

    <div class="subsection">
      <h3 class="text-uppercase">2. The Individual Date and Time Select Helpers</h3>
      <p>
        Sometimes you need just a particular element of a date or time, and Rails
        obliges you with a comprehensive set of individual date and time select
        helpers. In contrast to the date and time helpers that we just looked at, the
        following helpers are not bound to an instance variable on the page. Instead,
        they all take a date or time Ruby object as their first parameter. (All of these
        methods have a set of common options, covered in the following subsection.)
      </p>

      <!----------------------------------------------------------------------------------------------------------->
      <!----------------------------------------------- select_date ----------------------------------------------->
      <!----------------------------------------------------------------------------------------------------------->
      <br>
      <h4><code><strong>select_date(date = Date.current, options = {}, html_options = {})</strong></code></h4>
      <p>
        Returns a set of select tags (one each for year, month, and day) pre-selected
        with the date provided (or the current date). It’s possible to explicitly set the
        order of the tags using the :order option with an array of symbols <code>:year</code>, <code>:month</code>,
        and <code>:day</code> in the desired order.
      </p>
      <%= render 'shared/example_card', examples: [
          "select_date(Date.current, order: [:month, :day, :year])"
      ] %>

      <!----------------------------------------------------------------------------------------------------------->
      <!--------------------------------------------- select_datetime --------------------------------------------->
      <!----------------------------------------------------------------------------------------------------------->
      <br>
      <h4><code><strong>select_datetime(datetime = Time.current, options = {}, html_options = {})</strong></code></h4>
      <p>
        Returns a set of select tags (one each for year, month, day, hour, and minute)
        pre-selected with the datetime. Optionally, setting the include_seconds: true
        option adds a seconds field. It’s also possible to explicitly set the order of the
        tags using the :order option with an array of symbols :year, :month, and :day,
        :hour, :minute, and :seconds in the desired order. You can also add character
        values for the <code>:date_separator</code> and <code>:time_separator</code> options to control visual
        display of the elements (they default to "/" and ":").
      </p>

      <%= render 'shared/example_card', examples: [
          "select_datetime(Time.current, include_seconds: true, order: [:month, :day, :year], date_separator: '-', time_separator: '+')"
      ] %>

      <!----------------------------------------------------------------------------------------------------------->
      <!----------------------------------------------- select_day ------------------------------------------------>
      <!----------------------------------------------------------------------------------------------------------->
      <br>
      <h4><code><strong>select_day(date, options = {}, html_options = {})</strong></code></h4>
      <p>
        Returns a select tag with options for each of the days 1 through 31 with the
        current day selected. The date can also be substituted for a day value ranging
        from 1 to 31. If displaying days with a leading zero is your preference, setting
        the option <code>use_two_digit_numbers</code> to true will accomplish this.
      </p>

      <%= render 'shared/example_card', examples: [
        "select_day(Date.current)",
        "select_day(10)",
        "select_day(5, use_two_digit_numbers: true)"
      ] %>
      <p>
        By default, the field name defaults to day but can be overridden using the
        <code>:field_name</code> option.
      </p>

      <!----------------------------------------------------------------------------------------------------------->
      <!----------------------------------------------- select_hour ----------------------------------------------->
      <!----------------------------------------------------------------------------------------------------------->
      <br>
      <h4><code><strong>select_hour(datetime, options = {}, html_options = {})</strong></code></h4>
      <p>
        Returns a select tag with options for each of the hours 0 through 23 with
        the current hour selected. The datetime parameter can be substituted with an
        hour number from 0 to 23. Setting the <code>ampm</code> option to true will result in hours
        displayed in the AM/PM format. By default, the field name defaults to hour but
        can be overridden using the <code>:field_name</code> option.
      </p>
      <%= render 'shared/example_card', examples: [
          "select_hour(9)",
      ] %>

      <!----------------------------------------------------------------------------------------------------------->
      <!---------------------------------------------- select_minute ---------------------------------------------->
      <!----------------------------------------------------------------------------------------------------------->
      <br>
      <h4><code><strong>select_minute(datetime, options = {}, html_options = {})</strong></code></h4>
      <p>
        Returns a select tag with options for each of the minutes 0 through 59 with the
        current minute selected. Also can return a select tag with options by <code>minute_
        step</code> from 0 through 59 with the 00 minute selected. The datetime parameter
        can be substituted by a seconds value of 0 to 59. By default, the field name
        defaults to minute but can be overridden using the :field_name option.
      </p>
      <%= render 'shared/example_card', examples: [
          "select_minute(35, minute_step: 5)",
      ] %>

      <!----------------------------------------------------------------------------------------------------------->
      <!----------------------------------------------- select_month ---------------------------------------------->
      <!----------------------------------------------------------------------------------------------------------->
      <br>
      <h4><code><strong></strong></code></h4>
      <p>
        Returns a select tag with options for each of the months January through
        December with the current month selected. By default, the month names are
        presented as user options in the drop-down selection, and the month numbers
        (1 through 12) are used as values submitted to the server.
      </p>
      <p>
        It’s also possible to use month numbers for the presentation instead of names
        by setting <code>use_month_numbers: true</code>. To display month numbers with a leading
        zero, set option <code>:use_two_digit_numbers</code> to true. If you happen to want both
        numbers and names, set <code>add_month_numbers: true</code>. If you would prefer to show
        month names as abbreviations, set the <code>:use_short_month</code> option to true. Finally,
        if you want to use your own month names, set the value of the <code>:use_month_names</code>
        key in your options to an array of 12 month names.
      </p>
      <%= render 'shared/example_card', examples: [
          "select_month(Date.today)",
          "select_month(Date.today, use_month_numbers: true)",
          "select_month(Date.today, add_month_numbers: true)",
          "select_month(Date.today, use_short_month: true)",
          "select_month(Date.today, use_month_names: %w(Januar Februar Marts Apple Mei Junn Jully Augest Sep Octo Novb Decb))"
      ] %>

      <!----------------------------------------------------------------------------------------------------------->
      <!---------------------------------------------- select_seconds --------------------------------------------->
      <!----------------------------------------------------------------------------------------------------------->
      <br>
      <h4><code><strong>select_second(datetime, options = {}, html_options = {})</strong></code></h4>
      <p>
        Returns a select tag with options for each of the seconds 0 through 59 with
        the current second selected. The datetime parameter can either be a DateTime
        object or a second given as a number. By default, the field name defaults to
        second but can be overridden using the :field_name option.
      </p>
      <%= render 'shared/example_card', examples: [
          "select_second(33)"
      ] %>

      <!----------------------------------------------------------------------------------------------------------->
      <!----------------------------------------------- select_time ----------------------------------------------->
      <!----------------------------------------------------------------------------------------------------------->
      <br>
      <h4><code><strong>select_time(datetime = Time.current, options = {}, html_options = {})</strong></code></h4>
      <p>
        Returns a set of HTML select tags (one for hour and minute). You can set the
        <code>:time_separator</code> option to format the output. It’s possible to take an input for
        sections by setting option <code>:include_seconds</code> to true.
      </p>
      <%= render 'shared/example_card', examples: [
          "select_time(DateTime.now, time_separator: ':', include_seconds: true)",
      ] %>

      <!----------------------------------------------------------------------------------------------------------->
      <!----------------------------------------------- select_year ----------------------------------------------->
      <!----------------------------------------------------------------------------------------------------------->
      <br>
      <h4><code><strong>select_year(date, options = {}, html_options = {})</strong></code></h4>
      <p>
        Returns a select tag with options for each of the five years on each side
        of the current year selected. The five-year radius can be changed using the
        <cdoe>:start_year</cdoe> and <code>:end_year</code> options. Both ascending and descending year lists
        are supported by making :start_year less than or greater than :end_year. The
        date parameter can either be a Date object or a year given as a number.
      </p>
      <%= render 'shared/example_card', examples: [
          "select_year(Date.today, start_year: 1992, end_year: 2007)",
          "select_year(Date.today, start_year: 2005, end_year: 1900)",
      ] %>
    </div>

    <div class="subsection">
      <h3 class="text-uppercase">3. Common Options for Date Selection Helpers</h3>
      <p>
        All of the select-type methods share a number of common options that are as follows:
      </p>
      <h4><code><strong>:discard_type</strong></code></h4>
      <p>
        Set to true if you want to discard the type part of the select name. If
        set to true, the select_month method would use simply date (which can be
        overwritten using :prefix) instead of date[month].
      </p>
      <h4><code><strong>:field_name</strong></code></h4>
      <p>
        Enables you to override the natural name of a select tag (from
        day, minute, and so on)
      </p>
      <h4><code><strong>:include_blank</strong></code></h4>
      <p>
        Set to true if it should be possible to set an empty date.
      </p>
      <h4><code><strong>:prefix</strong></code></h4>
      <p>
        Overwrites the default prefix of date used for the names of the select tags.
        Specifying birthday would result in a name of birthday[month] instead of
        date[month] when passed to the select_month method.
      </p>
      <h4><code><strong>:use_hidden</strong></code></h4>
      <p>
        Set to true to embed the value of the datetime into the page as an HTML
        hidden input, instead of a select tag.
      </p>
      <h4><code><strong>:disabled</strong></code></h4>
      <p>
        Set to true if you want show the select fields as disabled.
      </p>
      <h4><code><strong>:prompt</strong></code></h4>
      <p>
        Set to true (for a generic prompt), a prompt string or a hash of prompt
        strings for :year, :month, :day, :hour, :minute and :second.
      </p>
    </div>

    <div>
      <h3 class="text-uppercase">4. <em>distance_in_time</em> Methods with Complex Descriptive Names</h3>
      <h4><code><strong>
        distance_of_time_in_words(from_time, to_time = 0, include_seconds_or_options = {}, options = {}))
      </strong></code></h4>
      <p>
        Reports the approximate distance in time between two Time, DateTime, or Date
        objects or integers as seconds. Set the <code>include_seconds</code> parameter to true if you
        want more detailed approximations when the distance is less than 1 minute.
      </p>
      <%= render 'shared/example_card', examples: [
          "distance_of_time_in_words(Time.current, Time.current + 50.minutes)",
          "distance_of_time_in_words(Time.current, Time.current + 15.seconds)",
          "distance_of_time_in_words(Time.current, Time.current + 15.seconds, include_seconds: true)",
          "distance_of_time_in_words(Time.current, 3.years.from_now)",
      ] %>
      <p>
        * The Rails API docs ask you to note that Rails calculates 1 year as 365.25 days.
      </p>
      <h4><code><strong>
        distance_of_time_in_words_to_now(from_time, include_seconds_or_options = {})
      </strong></code></h4>
      <p>
        Works exactly like distance_of_time_in_words except that the to_time is hardcoded
        to the current time. Usually invoked on created_at or updated_at attributes
        of your model, followed by the string ago in your template, as in the
        following example:
      </p>
      <%= render 'shared/example_card', examples: [
          "@user = User.find_or_create_by(name: 'Nobody', birthday: Date.new(2000,1,1))",
          "distance_of_time_in_words_to_now(@user.birthday) + ' ago'",
      ] %>
      <p>
        * Note that this method is aliased to <code>time_ago_in_words</code>
        for those who prefer shorter method names.
      </p>

      <h4><code><strong>
        time_tag(date_or_time, *args, &block)
      </strong></code></h4>
      <p>
        Introduced in Rails 3.1, the <code>time_tag</code> returns an HTML5 time element for a
        given date or time. Using the semantic time_tag helper ensures that your date
        or times within your markup are in a machine-readable format. Setting the
        option pubdate to true will add the attribute to the tag, indicating that the date
        or time is a publishing date. The following examples show the output you can
        expect when using it:
      </p>
      <%= render 'shared/example_card', examples: [
          "time_tag(Date.current)",
          "time_tag(Time.current)",
          "time_tag(Time.current, pubdate: true)",
          "time_tag(Date.current) do; 'Once upon a time'; end"
      ] %>
    </div>
    <div><%= link_to "back", index_path, class: "btn btn-primary" %></div>
  </div>
</section>
